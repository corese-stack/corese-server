#
# Functions shared by server STTL transformations
# javascript:trans() defined in webapp/js/server.js
#
@export package {


function st:isAjax(){
  st:get(st:protocol, st:ajax)
}

function st:protocol(?uri) {
    if (st:isAjax()) {
       concat("javascript:trans(\"", str(?uri), "\")") 
    } 
    else { str(?uri) }
}

# take st:include (("mode" st:mode)) into account
# to generate hyperlink
# &mode= st:get(st:mode)
function st:link(?uri) {
    concat(
      st:get(st:service),
      "?uri=", encode_for_uri(?uri), 
      if (coalesce(isURI(st:get(st:profile)), false),
        concat("&profile=",   st:qname(st:get(st:profile))),
        if (coalesce(isURI(st:get(st:transform)), false),
            concat("&transform=", st:qname(st:get(st:transform))),
            "") ),              
      st:include()
    )
} 

function st:link123(?uri) {
    concat(
      st:get(st:service),
      "?uri=", encode_for_uri(?uri),          
      coalesce(
        concat("&profile=",   st:qname(st:get(st:profile))), 
        concat("&transform=", st:qname(st:get(st:transform))), 
        ""),
      st:include()
    )
} 

# take st:include (("mode" st:mode)) into account
# to generate hyperlink
# &mode= st:get(st:mode)
function st:link(?uri, ?profile) {
    concat(st:get(st:service),
      "?uri=", encode_for_uri(?uri),          
      "&profile=", st:qname(?profile)
      ,st:include()
   )
}

function st:plink(?uri) {
    st:protocol(st:link(?uri))
}

function st:plink(?uri, ?profile) {
  st:protocol(st:link(?uri, ?profile))
}

function st:qname(?uri){
  kg:qname(?uri)
}

#
# st:param [ st:include (("mode" st:mode)) ]
# "&mode=" st:get(st:mode)
#

function st:include(){
  coalesce(
    reduce(rq:concat, maplist(
    lambda((?name, ?val)) { 
        coalesce(let (?value = st:get(?val)) {
            concat("&", ?name, "=", 
                if (isURI(?value), st:qname(?value), ?value)) 
        }, "")
    }, 
    st:get(st:include))),
  "")
}
  

function st:include2(){
  coalesce(
    loop ((?name, ?val) in coalesce(st:get(st:include), xt:list())) {
        coalesce(
            let (?value = st:get(?val)) {
                concat("&", ?name, "=", 
                    if (isURI(?value), st:qname(?value), ?value))
            },"")
    },
    "")
}


#
# try to get specific profile for uri from profile.ttl 
# st:lodprofile (( <http://fr.dbpedia.org/resource/> st:dbpedia )) 
# otherwise use st:profile
#
function st:pplink(?uri) {
  st:plink(?uri, coalesce(st:getprofile(?uri), st:get(st:profile)))
}

#
# take st:lodprofile into account
# st:lodprofile ((<http://fr.dbpedia.org/>   st:jdev) ("*" st:lod)) 
# if getprofile(?x) = st:lod, return uri as is, otherwise return pplink
#
function st:url(?x) {
    if (coalesce(st:getprofile(?x) = st:lod, false), ?x, st:pplink(?x)) 
}

# ?arg = st:mode
function st:include(?arg){
  coalesce(
    let (?m = st:get(?arg)) { bound(?m) } &&
    mapany (rq:equal, ?arg, st:get(st:include)), 
    false)
}

# search list  st:lodprofile ((namespace profile))
function st:getprofile(?uri){
     let ((?ns, ?prof) = mapfind(st:match, ?uri, st:get(st:lodprofile)))
     { ?prof }
}

# ?decl = (namespace profile)
function st:match(?x, ?decl){
  let (?ns = xt:get(?decl, 0)){
    strstarts(?x, ?ns) || coalesce(?ns = "*", false)
  }
}
  
# ____________________________________________________


function st:head(){
  if (st:isAjax(), "",
    st:server(st:dohead))
}

function st:tail(){
  if (st:isAjax(), "",
    st:server(st:dotail))
}


}
